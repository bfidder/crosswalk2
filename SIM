#!/usr/bin/env python2

# When a car attempts to queue a new event pass it through a layer that checks
# if the car should be slowing for the crosswalk or exiting the simulation.
# This way, car decide only has to worry about calculating what speed it can
# optimally go at.

import sys
import random
import math
import heapq
from LehmerRNG import LehmerRNG
from welford import Welford

#class definitions
class Pedestrian:
	def __init__(self,speed,arrival_time,wait_time,walking,position,time_at_cross):
		self.speed = speed
		self.arrival_time = arrival_time
		self.wait_time = wait_time
		self.walking = walking
		self.position = position
		self.time_at_cross = time_at_cross
	def calc_walk_time_to_crosswalk(self):
		return (165/self.speed) + self.arrival_time
	def calc_time_to_cross(self):
		return (46/self.speed)
	def can_cross(self,crosswalk,time):
		time_to_cross = self.calc_time_to_cross()
		return True if ((crosswalk.when_walk + 12) - time > time_to_cross)  else False


class Car:
	"""Holds data about each car that runs through the simulation."""
	def __init__(self, max_speed, accel, spawn_time):
		self.max_speed = speed
		self.cur_speed = self.max_speed
		self.accel = accel
		self.spawn_time = spawn_time
		self.strategy = 'constant'
		self.position = 0.0
		self.optimal_exit_time = max_speed / (330.0 * 7)

	def time_to_speed(self, new_speed):
		if new_speed > self.max_speed:
			new_speed = self.max_speed
		time = fabs((new_speed - self.cur_speed) / accel)
		dist = self.accel * time ** 2 / 2 + self.cur_speed * time
		return (time, dist)

	def time_to_pos(self, abs_pos):
		"""Given a position (relative to the simulation, not distance from car)
		returns the amount of time needed to travel at current speed to that
		position"""
		return (abs_pos - self.position) / self.cur_speed

	def decide_on_strategy(self, car):
		"""Given the i-1th car, this car will decide whether it can maintain its
		velocity, or if it needs to accelerate or decelerate."""
		raise NotImplementedError


class Event:
	def __init__(self, e_type, index, time):
		self.e_type = e_type
		self.index = index
		self.time = time

	def __lt__(self, event):
		return self.time < event.time


class CarEvent(Event):
	def __init__(self, e_type, car_index, direction, time):
		super(Event, self).__init__(e_type, car_index, time)

class Crosswalk:
	def __init__(self,state,walk,last_green,button_pressed,when_walk):
		self.state = state
		self.walk = walk
		self.last_green = last_green
		self.button_pressed = button_pressed
		self.when_walk = when_walk
		self.peds_waiting = []
		self.cars_waiting = []
		self.button_pressed = button_pressed
		self.when_walk = when_walk

class Interval:
	def __init__(self,start,finish,rate):
		self.start = start
		self.finish = finish
		self.rate = rate

#get the command line arguments
argsize = len(sys.argv)
if argsize != 9:
	print("Error: incorrect number of arguments.")
	exit(1)

run_type = sys.argv[1]
run_time = float(sys.argv[2])
run_time_sec = run_time*60
seed = int(sys.argv[3])
ped_file = sys.argv[4]
car_file = sys.argv[5]
ped_rate_file = sys.argv[6]
car_rate_file = sys.argv[7]
trace_file = sys.argv[8]
#print run_time_sec

#parse the input file for pedestrian arrival times
#open all of the files
ped_arrive = open(ped_file, 'r')
car_arrive = open(car_file, 'r')
ped_rate = open(ped_rate_file, 'r')
car_rate = open(car_rate_file, 'r')
trace = open(trace_file, 'a')

ped_intervals = []
car_intervals = []

#parse the ped arrivals
ped_arrivals = ped_arrive.readlines()
max_ped_lambda = 0
ped_first_rate = 0
last_time = 0
for line in ped_arrivals:
	split = line.split()
	time_int = float(split[0])
	rate = float(split[1])
	if ped_first_rate == 0:
		ped_first_rate = rate
	if rate > max_ped_lambda:
		max_ped_lambda = rate
	inter = Interval(last_time,time_int,rate)
	last_time = time_int
	ped_intervals.append(inter)
last_inter = Interval(last_time, float('inf'),rate)
ped_intervals.append(last_inter)

car_arrivals = car_arrive.readlines()
max_car_lambda = 0
car_first_rate = 0
last_time = 0
for line in car_arrivals:
	split = line.split()
	time_int = int(split[0])
	rate = int(split[1])
	if car_first_rate == 0:
		car_first_rate = rate
	if rate > max_car_lambda:
		max_car_lambda = rate
	inter = Interval(last_time,time_int,rate)
	last_time = time_int
	car_intervals.append(inter)
last_inter = Interval(last_time, float('inf'),rate)
car_intervals.append(last_inter)


#functions for getting a uniform random number
#for a range and an exponiential random number
def rand_range(rng, a, b):
	uni_random = rng.random()
	return ((uni_random*(b-a)) + a)

def exponential(rng, n):
	return -n * math.log(1-rng.random())

def bernoulli(rng, p):
	return 1 if (rng.random() < (1.0 - p)) else 0

def find_rate(car_ped, time):
	arrives = time/60
	if car_ped == 'car':
		for inter in car_intervals:
			if arrives >= inter.start and arrives < inter.finish:
				return inter.rate
	else:
		for inter in ped_intervals:
			if arrives >= inter.start and arrives < inter.finish:
				return inter.rate

#function for creating a new car
def new_car(rng,time):
	MIN_FT_PER_SEC = 36.66
	MAX_FT_PER_SEC = 51.33
	MIN_FT_PER_SEC_SQ = 7 * 5280 / 3600
	MAX_FT_PER_SEC_SQ = 12 * 5280 / 3600
	n_car = Car(rand_range(rng, MIN_FT_PER_SEC, MAX_FT_PER_SEC),
			rand_range(rng, MIN_FT_PER_SEC_SQ, MAX_FT_PER_SEC_SQ),
			time)
	return n_car

#function for creating a new pedestrian
def new_ped(rng,time):
	n_ped = Pedestrian(rand_range(rng,6, 13), time, 0, False, 0, time)
	return n_ped

car_welford = Welford(20)
ped_welford = Welford(20)

#do ALL THE SETUP!
#initialize the LehmerRNG
rng = LehmerRNG(seed, 0)
sim_clock = 0.0
event_queue = []
cars_left = []
cars_right = []
DIST_TO_CROSSWALK = 330.0 * 7 / 2 - 12.0
crosswalk = Crosswalk('green',False,0,False,0)

#initialize the car arrival events (from both sides
#I'm using exponential 15 because there are 4 car per
#minute and a 1/4 of a minute is 15 seconds and the
#range is in feet/sec instead of miles per hour
# TODO: Use correct spawn lambda (which now varies with time, meet up with Bri)
spawn_lambda = 30
arrival_time = exponential(rng, spawn_lambda)
cars_left.append(new_car(rng, arrival_time))
event1 = CarEvent('car_arrival', 0, 'left', cars_left[0].arrival_time)

arrival_time = exponential(rng, spawn_lambda)
cars_right.append(new_car(rng, arrival_time))
event2 = CarEvent('car_arrival', 0, 'right', cars_right[0].arrival_time)
crosswalk = Crosswalk('green',False,0,False,0)

#Push car events into the event queue
heapq.heappush(event_queue, event1)
heapq.heappush(event_queue, event2)

#initialize the ped arrival events (from both sides)
ped_start_left = Pedestrian(rand_range(rng,6,13),exponential(rng,60/ped_first_rate),0,False,0,0)
ped_start_right = Pedestrian(rand_range(rng,6,13),exponential(rng,60/ped_first_rate),0,False,330,0)
ped_event1 = Event('ped_arrival',ped_start_left,ped_start_left.arrival_time)
ped_event2 = Event('ped_arrival',ped_start_right,ped_start_right.arrival_time)
heapq.heappush(event_queue, ped_event1)
heapq.heappush(event_queue, ped_event2)




while event_queue:
	#run the simulation
	event = heapq.heappop(event_queue)
	if isinstance(event, CarEvent):
		# Get the direction that traffic travels so we can update the whole queue
		direc = cars_left if event.direction == 'left' else cars_right
	#Pause the while loop
	raw_input()

	#car block logic
	if event.e_type == 'car_arrival':
		print('car arrives: %f' % (event.arrival_time))
		i = event.index
		# Cover the special cases
		if i == 0:
			# info is a tuple of time to get to the speed, and distance traveled in that time
			info = direc[i].time_to_speed(0.0)
			safe_stop_dist = DIST_TO_CROSSWALK - info[1]
			new_time = direc[i].time_to_pos(safe_stop_dist)
			new_event = CarEvent('car_decide', i, event.direction, new_time)
			heapq.heappush(event_queue, new_event)
			direc[i].position = safe_stop_dist
		else:
			info = direc[i].time_to_speed(0.0)
			if DIST_TO_CROSSWALK > direc[i+1].position:
				no_closer = direc[i+1].position - 20
				safe_stop_dist = no_closer - info[1]
				new_time = direc[i].time_to_pos(safe_stop_dist)
				new_event = CarEvent('car_decide', i, event.direction, new_time)
				heapq.heappush(event_queue, new_event)
				direc[i].position = safe_stop_dist
			else:
				# TODO This is the same as if they are the first car, DRY this up
				safe_stop_dist = DIST_TO_CROSSWALK - info[1]
				new_time = direc[i].time_to_pos(safe_stop_dist)
				new_event = CarEvent('car_decide', i, event.direction, new_time)
				heapq.heappush(event_queue, new_event)
				direc[i].position = safe_stop_dist
		if event.time < run_time_sec:
			temp = car.arrival_time + exponential(rng,60/max_car_lambda)
			uni = rand_range(rng, 0, max_car_lambda)
			while uni > find_rate('car',temp) and temp < run_time_sec:
				temp = temp + exponential(rng, 60/max_car_lambda)
				uni = rand_range(rng, 0, max_car_lambda)
			new_c = new_car(rng,temp,car.direction)
			e = Event('car_arrival',new_c,new_c.arrival_time)
			heapq.heappush(event_queue,e)

	elif event.e_type == 'car_crosswalk':
		print('car in crosswalk: %f' % (event.arrival_time))
		car = event.car_ped_cross
		car.time_at_cross = event.arrival_time
		if car.direction == 'left':
			car.position = 1143
		else:
			car.position = 1167
		if crosswalk.state == 'red' or crosswalk.state == 'yellow':
			crosswalk.cars_waiting.append(car)
		else:
			exit_time = car.calc_time_from_cross_to_exit(event.arrival_time)
			new_e = Event('car_exit',car,exit_time)
			heapq.heappush(event_queue,new_e)

	elif event.e_type == 'car_decide':
		print('car_decide')
		#If a decide trickles back, remove that cars already scheduled car_decide

	elif event.e_type == 'car_exit':
		print('car exiting: %f' % (event.arrival_time))
		car = event.car_ped_cross
		if car.direction == 'left':
			car.position = 0
		else:
			car.position = 2310
		car_welford.add(car.wait_time)

	#Pedestrian Events
	elif event.e_type == 'ped_arrival':
		print('ped arrives: %f' % (event.arrival_time))
		ped = event.car_ped_cross
		new_e_time = ped.calc_walk_time_to_crosswalk()
		new_e = Event('ped_crosswalk',ped,new_e_time)
		heapq.heappush(event_queue, new_e)
		if ped.arrival_time < run_time_sec:
			temp = ped.arrival_time + exponential(rng,60/max_ped_lambda)
			uni = rand_range(rng, 0, max_ped_lambda)
			while uni > find_rate('car',temp) and temp < run_time_sec:
				temp = temp + exponential(rng, 60/max_ped_lambda)
				uni = rand_range(rng, 0, max_ped_lambda)
			new_p = new_ped(rng,temp)
			e = Event('ped_arrival',new_p,new_p.arrival_time)
			heapq.heappush(event_queue,e)
		
	elif event.e_type == 'ped_crosswalk':
		#print 'ped at cross: %f' % (event.arrival_time)
		ped = event.car_ped_cross
		ped.time_at_cross = event.arrival_time
		#all the stupid button pressing logic here:
		#if a person is alone (2/3 chance) and the it's don't walk
		if crosswalk.walk == False or ped.can_cross(crosswalk,event.arrival_time) == False:
			if crosswalk.peds_waiting == []:
				#print "one person waiting"
				if bernoulli(rng, 2/3):
					new_e = Event('button_push',crosswalk,event.arrival_time)
					heapq.heappush(event_queue, new_e)
			else:
				#print "%d people waiting" % (len(crosswalk.peds_waiting) + 1)
				if bernoulli(rng, 1/(len(crosswalk.peds_waiting) + 1)):
					new_e = Event('button_push', crosswalk,event.arrival_time)
					heapq.heappush(event_queue, new_e)
			e = Event('wait_a_minute',ped,event.arrival_time+60)
			heapq.heappush(event_queue, e)
			crosswalk.peds_waiting.append(ped)
		else:
			ped.walking = True
			exit_event = Event('ped_exit',ped,event.arrival_time+ped.calc_time_to_cross())
			heapq.heappush(event_queue, exit_event)

	if event.e_type == 'wait_a_minute':
		ped = event.car_ped_cross
		if ped.walking == False:
			new_e = Event('button_push',crosswalk,event.arrival_time)
			heapq.heappush(event_queue, new_e)

	elif event.e_type == 'ped_exit':
		#print 'ped exiting: %f' % (event.arrival_time)
		ped = event.car_ped_cross
		ped_welford.add(ped.wait_time)

	#crosswalk events
	elif event.e_type == 'button_push':
		cross = event.car_ped_cross
		#This is so the button press will only have an effect if it's
		#Green, doesn't stop pedestrians from pushing, just stops it 
		#from having an effect
		if cross.button_pressed == False:
			yellow_start_time = max(event.arrival_time + 1, cross.last_green + 14)
			e = Event('yellow_start',cross,yellow_start_time)
			heapq.heappush(event_queue, e)
			#print 'button pushed: %f' % (event.arrival_time)
			cross.button_pressed = True

	elif event.e_type == 'yellow_start':
		cross = event.car_ped_cross
		cross.state = 'yellow'
		cross.walk = False
		red_start_time = event.arrival_time + 8
		e = Event('red_start',cross,red_start_time)
		heapq.heappush(event_queue, e)
		#print 'yellow light: %f' % (event.arrival_time)

	elif event.e_type == 'red_start':
		cross = event.car_ped_cross
		cross.state = 'red'
		cross.walk = True
		for ped in cross.peds_waiting:
			ped.wait_time = event.arrival_time - ped.time_at_cross
			ped.walking = True
			exit_time = ped.calc_time_to_cross() + event.arrival_time
			e = Event('ped_exit',ped,exit_time)
			heapq.heappush(event_queue, e)
		cross.peds_waiting = []
		green_start_time = event.arrival_time + 12
		e = Event('green_start',cross,green_start_time)
		heapq.heappush(event_queue, e)
		#print 'red light: %f' % (event.arrival_time)

	elif event.e_type == 'green_start':
		#print 'green light: %f' % (event.arrival_time)
		cross = event.car_ped_cross
		cross.state = 'green'
		cross.walk = False
		#unblock all of the stopped cars
		#and set the list of stopped cars to []
		for car in cross.cars_waiting:
			car.wait_time = event.arrival_time - car.time_at_cross
			exit_time = car.calc_time_from_cross_to_exit(event.arrival_time)
			e = Event('car_exit',car,exit_time)
			heapq.heappush(event_queue, e)
		cross.cars_waiting = []
		#also set the crosswalk last_green to the current time
		cross.last_green = event.arrival_time
		cross.button_pressed = False

	elif event.e_type == 'green_start':
		#print 'green light: %f' % (event.arrival_time)
		cross = event.car_ped_cross
		cross.state = 'green'
		cross.walk = False
		#unblock all of the stopped cars
		#and set the list of stopped cars to []
		for car in cross.cars_waiting:
			car.wait_time = event.arrival_time - car.time_at_cross
			exit_time = car.calc_time_from_cross_to_exit(event.arrival_time)
			e = Event('car_exit',car,exit_time)
			heapq.heappush(event_queue, e)
		cross.cars_waiting = []
		#also set the crosswalk last_green to the current time
		cross.last_green = event.arrival_time
		cross.button_pressed = False
	
	#set the sim_clock to the event arrival time
	sim_clock = event.arrival_time

#Statistics
car_avg = car_welford.xbar/60
car_min = car_welford.min/60
car_max = car_welford.max/60
car_std = math.sqrt(car_welford.var)/60

ped_avg = ped_welford.xbar/60
ped_min = ped_welford.min/60
ped_max = ped_welford.max/60
ped_std = math.sqrt(ped_welford.var)/60

print("OUTPUT Pedestrians %d" % (ped_welford.i))
print("OUTPUT Cars %d" % (car_welford.i))
print("OUTPUT Duration %f" % ((sim_clock/60)-run_time))
print("OUTPUT MIN,AVG,STD,MAX Pedestrians %f, %f, %f, %f " % (ped_min,ped_avg,ped_std,ped_max))
print("OUTPUT MIN,AVG,STD,MAX Cars %f, %f, %f, %f " % (car_min,car_avg,car_std,car_max))

data_file = open('acwait.dat', 'a')
for i in range(1,21):
	car_core = car_welford.r(i)
	ped_core = ped_welford.r(i)
	data_file.write(str(ped_core) + " " + str(car_core) + "\n")

data_file.close()

# vim: noexpandtab tabstop=4
