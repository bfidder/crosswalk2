#!/usr/bin/env python2

# When a car attempts to queue a new event pass it through a layer that checks
# if the car should be slowing for the crosswalk or exiting the simulation.
# This way, car decide only has to worry about calculating what speed it can
# optimally go at.

import heapq
import json
import math
import sys
from LehmerRNG import LehmerRNG
from welford import Welford

MPH_TO_FPS = 5280.0 / 3600.0
LAG_CORRELATION = 20
NUM_BLOCKS = 7.0
BLOCK_LENGTH = 330.0		#feet
CROSS_WIDTH = 24.0			#feet, Distance cars have to travel
CROSS_LENGTH = 46.0			#feet, Distance peds have to travel
DIST_TO_BUTTON = BLOCK_LENGTH / 2		#feet
DIST_TO_CROSSWALK = BLOCK_LENGTH * NUM_BLOCKS / 2 - CROSS_WIDTH / 2			#feet
MIN_FT_PER_SEC_SQ = 7 * MPH_TO_FPS
MAX_FT_PER_SEC_SQ = 12 * MPH_TO_FPS
#print(DIST_TO_CROSSWALK)

#class definitions
class Pedestrian:
	def __init__(self,speed,arrival_time,wait_time,walking,position,time_at_cross):
		self.speed = speed
		self.arrival_time = arrival_time
		self.wait_time = wait_time
		self.walking = walking
		self.position = position
		self.time_at_cross = time_at_cross
	def calc_walk_time_to_crosswalk(self):
		return BLOCK_LENGTH / (2 * self.speed) + self.arrival_time
	def calc_time_to_cross(self):
		return (CROSS_LENGTH/self.speed)
	def can_cross(self,crosswalk,time):
		time_to_cross = self.calc_time_to_cross()
		return True if ((crosswalk.when_walk + 12) - time > time_to_cross)  else False


class Car:
	"""Holds data about each car that runs through the simulation."""
	def __init__(self, max_speed, accel, spawn_time):
		self.max_speed = float(max_speed)
		self.cur_speed = self.max_speed
		self.accel = float(accel)
		self.spawn_time = float(spawn_time)
		self.strategy = 'constant'
		self.position = float(0.0)
		self.optimal_exit_time = max_speed / (BLOCK_LENGTH * NUM_BLOCKS)

	def time_to_speed(self, new_speed):
		if new_speed > self.max_speed:
			new_speed = self.max_speed
		time = math.fabs((new_speed - float(self.cur_speed)) / self.accel)
		dist = self.accel * time ** 2 / 2 + self.cur_speed * time
		return (time, dist)

	def time_to_pos(self, abs_pos):
		"""Given a position (relative to the simulation, not distance from car)
		returns the amount of time needed to travel at current speed to that
		position"""
		return (abs_pos - self.position) / self.cur_speed

	def decide_on_strategy(self, car):
		"""Given the i-1th car, this car will decide whether it can maintain its
		velocity, or if it needs to accelerate or decelerate.
		
		Does not consider the crosswalk light. This only decides how best to get
		to the car specified."""
		# Use the other car's current position and speed to determine the optimal
		# (fastest) way to minimize distance between cars
		if car:
			print("you go %.4f, I'm going %.4f" % (car.cur_speed, self.cur_speed))
			print("we're %.4f apart" % (car.position - self.position))
			max_vel = car.cur_speed if car.cur_speed < self.max_speed else self.max_speed
		else:
			max_vel = max_speed
		print("I can go %.4f (%.4f)" % (max_vel, self.cur_speed))
		#raise NotImplementedError


class Event:
	def __init__(self, e_type, index, time):
		self.e_type = e_type
		self.index = index
		self.time = time

	def __lt__(self, event):
		return self.time < event.time


class CarEvent(Event):
	def __init__(self, e_type, car_index, direction, time):
		Event.__init__(self,e_type, car_index, time)
		self.direction = direction


class Crosswalk:
	def __init__(self,state,walk,last_green,button_pressed,when_walk):
		self.state = state
		self.walk = walk
		self.last_green = last_green
		self.button_pressed = button_pressed
		self.when_walk = when_walk
		self.peds_waiting = []
		self.cars_waiting = []
		self.button_pressed = button_pressed
		self.when_walk = when_walk

class Interval:
	def __init__(self,start,finish,rate):
		self.start = start
		self.finish = finish
		self.rate = rate

#functions for getting a uniform random number
#for a range and an exponiential random number
def rand_range(rng, a, b):
	uni_random = rng.random()
	return ((uni_random*(b-a)) + a)

def exponential(rng, n):
	return -n * math.log(1-rng.random())

def bernoulli(rng, p):
	return 1 if (rng.random() < (1.0 - p)) else 0

def find_rate(car_ped, time):
	arrives = time/60
	if car_ped == 'car':
		for inter in car_intervals:
			if arrives >= inter.start and arrives < inter.finish:
				return inter.rate
	else:
		for inter in ped_intervals:
			if arrives >= inter.start and arrives < inter.finish:
				return inter.rate

def car_rate(rng):
	rand_rate = 100 * rng.random()
	previous_val = 0
	for value in car_rates.values():
		previous_val += float(value)
		if rand_rate <= previous_val:
			rate = [k for k, v in car_rates.iteritems() if v == value][0] 
			return float(rate)

def ped_rate(rng):
	rand_rate = 100 * rng.random()
	previous_val = 0
	for value in ped_rates.values():
		previous_val += float(value)
		if rand_rate <= previous_val:
			rate = [k for k, v in ped_rates.iteritems() if v == value][0] 
			return float(rate)

#function for creating a new car
def new_car(rng,time):
	n_car = Car(car_rate(rng),
			rand_range(rng, MIN_FT_PER_SEC_SQ, MAX_FT_PER_SEC_SQ),
			time)
	return n_car

#function for creating a new pedestrian
def new_ped(rng,time):
	n_ped = Pedestrian(ped_rate(rng), time, 0, False, 0, time)
	return n_ped


#get the command line arguments
argsize = len(sys.argv)
if argsize != 9:
	print("Error: incorrect number of arguments.")
	print("Usage: ./SIM N runtime seed ped_arrival car_arrival ped_rate car_rate trace_file")
	exit(1)

run_type = sys.argv[1]
run_time = float(sys.argv[2])
run_time_sec = run_time*60
seed = int(sys.argv[3])
ped_file = sys.argv[4]
car_file = sys.argv[5]
ped_rate_file = sys.argv[6]
car_rate_file = sys.argv[7]
trace_file = sys.argv[8]
#print run_time_sec

#parse the input file for pedestrian arrival times
#open all of the files
ped_arrive = open(ped_file, 'r')
car_arrive = open(car_file, 'r')
ped_rate_f = open(ped_rate_file, 'r')
car_rate_f = open(car_rate_file, 'r')
trace = open(trace_file, 'a')

ped_intervals = []
car_intervals = []

#parse the ped arrivals
ped_arrivals = ped_arrive.readlines()
max_ped_lambda = 0
ped_first_rate = 0
last_time = 0
for line in ped_arrivals:
	split = line.split()
	time_int = float(split[0])
	rate = float(split[1])
	if ped_first_rate == 0:
		ped_first_rate = rate
	if rate > max_ped_lambda:
		max_ped_lambda = rate
	inter = Interval(last_time,time_int,rate)
	last_time = time_int
	ped_intervals.append(inter)
last_inter = Interval(last_time, float('inf'),rate)
ped_intervals.append(last_inter)

car_arrivals = car_arrive.readlines()
max_car_lambda = 0
car_first_rate = 0
last_time = 0
for line in car_arrivals:
	split = line.split()
	time_int = int(split[0])
	rate = int(split[1])
	if car_first_rate == 0:
		car_first_rate = rate
	if rate > max_car_lambda:
		max_car_lambda = rate
	inter = Interval(last_time,time_int,rate)
	last_time = time_int
	car_intervals.append(inter)
last_inter = Interval(last_time, float('inf'),rate)
car_intervals.append(last_inter)

#parse the car rates file
car_rates = {}
for line in car_rate_f.readlines():
	split_line = line.split()
	car_rates[split_line[0]] = split_line[1]

ped_rates = {}
for line in ped_rate_f.readlines():
	split_line = line.split()
	ped_rates[split_line[0]] = split_line[1]


#do ALL THE SETUP!
rng = LehmerRNG(seed, 0)
sim_clock = 0.0
event_queue = []
cars_left = []
cars_right = []
ped_array = []
crosswalk = Crosswalk('green',False,0,False,0)
car_welford = Welford(LAG_CORRELATION)
ped_welford = Welford(LAG_CORRELATION)

#initialize the car arrival events (from both sides
#I'm using exponential 15 because there are 4 car per
#minute and a 1/4 of a minute is 15 seconds and the
#range is in feet/sec instead of miles per hour
spawn_time_left = exponential(rng, 60 / car_first_rate)
cars_left.append(new_car(rng, spawn_time_left))
event1 = CarEvent('car_arrival', 0, 'left', cars_left[0].spawn_time)

spawn_time_right = exponential(rng,60/car_first_rate)
cars_right.append(new_car(rng, spawn_time_right))
event2 = CarEvent('car_arrival', 0, 'right', cars_right[0].spawn_time)
crosswalk = Crosswalk('green',False,0,False,0)

#Push car events into the event queue
heapq.heappush(event_queue, event1)
#heapq.heappush(event_queue, event2)

#initialize the ped arrival events (from both sides)
ped_start_left = Pedestrian(ped_rate(rng),exponential(rng,60/ped_first_rate),0,False,0,0)
ped_start_right = Pedestrian(ped_rate(rng),exponential(rng,60/ped_first_rate),0,False,330,0)
ped_array.append(ped_start_left)
ped_array.append(ped_start_right)
ped_event1 = Event('ped_arrival',0,ped_start_left.arrival_time)
ped_event2 = Event('ped_arrival',1,ped_start_right.arrival_time)
heapq.heappush(event_queue, ped_event1)
heapq.heappush(event_queue, ped_event2)






while event_queue:
	#run the simulation
	event = heapq.heappop(event_queue)
	if isinstance(event, CarEvent):
		# Get the direction that traffic travels so we can update the whole queue
		direc = cars_left if event.direction == 'left' else cars_right
		#DEBUG
		#print("%s: %s %.6f" % (event.e_type, event.direction, event.time))
	#else:
		#DEBUG
		#print("%s: %.6f" % (event.e_type, event.time))

	#car block logic
	if event.e_type == 'car_arrival':
		#print('car arrives: %f' % (event.time))
		i = event.index
		# info is a tuple of time to get to the speed, and distance traveled in that time
		info = direc[i].time_to_speed(0.0)
		if i == 0 or DIST_TO_CROSSWALK < direc[i-1].position:
			safe_stop_dist = DIST_TO_CROSSWALK - info[1]
			new_time = direc[i].time_to_pos(safe_stop_dist)
		else:
			no_closer = direc[i-1].position - 20
			safe_stop_dist = no_closer - info[1]
			new_time = direc[i].time_to_pos(safe_stop_dist)
		#DEBUG
		#print("schedule decision for %.4f" % new_time)
		#print("go to %.4f" % safe_stop_dist)
		new_event = CarEvent('car_decide', i, event.direction, new_time)
		heapq.heappush(event_queue, new_event)
		direc[i].position = safe_stop_dist
		if event.time < run_time_sec:
			temp = event.time + exponential(rng,60/max_car_lambda)
			uni = rand_range(rng, 0, max_car_lambda/60)
			while uni > find_rate('car',temp) and temp < run_time_sec:
				temp = temp + exponential(rng, 60/max_car_lambda)
				uni = rand_range(rng, 0, max_car_lambda/60)
			new_c = new_car(rng,temp)
			car_index = len(direc)
			direc.append(new_c)
			e = CarEvent('car_arrival',car_index,event.direction,new_c.spawn_time)
			heapq.heappush(event_queue,e)

	elif event.e_type == 'car_crosswalk':
		#print('car in crosswalk: %f' % (event.time))
		car_i = event.index
		car = direc[car_i]
		car.time_at_cross = event.time
		if car.direction == 'left':
			car.position = 1143
		else:
			car.position = 1167
		if crosswalk.state == 'red' or crosswalk.state == 'yellow':
			crosswalk.cars_waiting.append(car)
		else:
			exit_time = car.calc_time_from_cross_to_exit(event.time)
			new_e = Event('car_exit',car_i,exit_time)
			heapq.heappush(event_queue,new_e)

	elif event.e_type == 'car_decide':
		#This logic handles getting the car through major obstacles
		#The car will decide how it will handle cars in front of it.
		i = event.index
		car = direc[event.index]
		#decision = car.decide_on_strategy(direc[event.index-1] if i > 0 else None)
		if car.position < DIST_TO_CROSSWALK:
			#Decide if we need to stop at the stoplight, else we can zip through
			car
		#print("index: %d" % event.index)
		#print("\"thiscar\": %s" % json.dumps(direc[event.index].__dict__))
		#print("\"ahead\": %s" % json.dumps(direc[event.index-1].__dict__))
		#If a decide trickles back, remove that cars already scheduled car_decide

	elif event.e_type == 'car_exit':
		#print('car exiting: %f' % (event.arrival_time))
		car_i = event.index
		car = direc[car_i]
		if car.direction == 'left':
			car.position = 0
		else:
			car.position = 2310
		car_welford.add(car.wait_time)

	#Pedestrian Events
	elif event.e_type == 'ped_arrival':
		#print('ped arrives: %f' % (event.time))
		i = event.index
		ped = ped_array[i]
		new_e_time = ped.calc_walk_time_to_crosswalk()
		new_e = Event('ped_crosswalk',i,new_e_time)
		heapq.heappush(event_queue, new_e)
		if ped.arrival_time < run_time_sec:
			temp = ped.arrival_time + exponential(rng,60/max_ped_lambda)
			uni = rand_range(rng, 0, max_ped_lambda/60)
			while uni > find_rate('car',temp) and temp < run_time_sec:
				temp = temp + exponential(rng, 60/max_ped_lambda)
				uni = rand_range(rng, 0, max_ped_lambda/60)
			new_p = new_ped(rng,temp)
			ped_size = len(ped_array)
			ped_array.append(new_p)
			e = Event('ped_arrival',ped_size,new_p.arrival_time)
			heapq.heappush(event_queue,e)
		
	elif event.e_type == 'ped_crosswalk':
		#print 'ped at cross: %f' % (event.arrival_time)
		ped_i = event.index
		ped = ped_array[ped_i]
		ped.time_at_cross = event.time
		#all the stupid button pressing logic here:
		#if a person is alone (2/3 chance) and the it's don't walk
		if crosswalk.walk == False or ped.can_cross(crosswalk,event.time) == False:
			if crosswalk.peds_waiting == []:
				#print "one person waiting"
				if bernoulli(rng, 2/3):
					new_e = Event('button_push',crosswalk,event.time)
					heapq.heappush(event_queue, new_e)
			else:
				#print "%d people waiting" % (len(crosswalk.peds_waiting) + 1)
				if bernoulli(rng, 1/(len(crosswalk.peds_waiting) + 1)):
					new_e = Event('button_push', crosswalk,event.time)
					heapq.heappush(event_queue, new_e)
			e = Event('wait_a_minute',ped_i,event.time+60)
			heapq.heappush(event_queue, e)
			crosswalk.peds_waiting.append(ped)
		else:
			ped.walking = True
			exit_event = Event('ped_exit',ped_i,event.time+ped.calc_time_to_cross())
			heapq.heappush(event_queue, exit_event)

	if event.e_type == 'wait_a_minute':
		ped_i = event.index
		ped = ped_array[ped_i]
		if ped.walking == False:
			new_e = Event('button_push',crosswalk,event.time)
			heapq.heappush(event_queue, new_e)

	elif event.e_type == 'ped_exit':
		#print 'ped exiting: %f' % (event.arrival_time)
		ped_i = event.index
		ped = ped_array[ped_i]
		ped_welford.add(ped.wait_time)

	#crosswalk events
	elif event.e_type == 'button_push':
		#This is so the button press will only have an effect if it's
		#Green, doesn't stop pedestrians from pushing, just stops it 
		#from having an effect
		if crosswalk.button_pressed == False:
			yellow_start_time = max(event.time + 1, crosswalk.last_green + 14)
			e = Event('yellow_start',crosswalk,yellow_start_time)
			heapq.heappush(event_queue, e)
			#print 'button pushed: %f' % (event.arrival_time)
			crosswalk.button_pressed = True

	elif event.e_type == 'yellow_start':
		crosswalk.state = 'yellow'
		crosswalk.walk = False
		red_start_time = event.time + 8
		e = Event('red_start',crosswalk,red_start_time)
		heapq.heappush(event_queue, e)
		#print 'yellow light: %f' % (event.arrival_time)

	elif event.e_type == 'red_start':
		cross = event.index
		cross.state = 'red'
		cross.walk = True
		for ped in cross.peds_waiting:
			ped.wait_time = event.time - ped.time_at_cross
			ped.walking = True
			exit_time = ped.calc_time_to_cross() + event.time
			ped_index = ped_array.index(ped)
			e = Event('ped_exit',ped_index,exit_time)
			heapq.heappush(event_queue, e)
		cross.peds_waiting = []
		green_start_time = event.time + 12
		e = Event('green_start',cross,green_start_time)
		heapq.heappush(event_queue, e)
		#print 'red light: %f' % (event.arrival_time)

	elif event.e_type == 'green_start':
		#print 'green light: %f' % (event.arrival_time)
		cross = event.index
		cross.state = 'green'
		cross.walk = False
		#unblock all of the stopped cars
		#and set the list of stopped cars to []
		for car in cross.cars_waiting:
			car.wait_time = event.time - car.time_at_cross
			exit_time = car.calc_time_from_cross_to_exit(event.time)
			e = Event('car_exit',car,exit_time)
			heapq.heappush(event_queue, e)
		cross.cars_waiting = []
		#also set the crosswalk last_green to the current time
		cross.last_green = event.time
		cross.button_pressed = False
	
	#set the sim_clock to the event arrival time
	sim_clock = event.time

	#Pause the while loop
	#DEBUG
	#raw_input()

#Statistics
#car_avg = car_welford.xbar/60
#car_min = car_welford.min/60
#car_max = car_welford.max/60
#car_std = math.sqrt(car_welford.var)/60

ped_avg = ped_welford.xbar/60
ped_min = ped_welford.min/60
ped_max = ped_welford.max/60
ped_std = math.sqrt(ped_welford.var)/60

print("OUTPUT Pedestrians %d" % (ped_welford.i))
#TODO Use Welford!
print("OUTPUT Cars %d" % (len(cars_left) + len(cars_right)))
print("OUTPUT Duration %f" % ((sim_clock/60)-run_time))
print("OUTPUT MIN,AVG,STD,MAX Pedestrians %.4f %.4f %.4f %.4f" % (ped_min,ped_avg,ped_std,ped_max))
#print("OUTPUT MIN,AVG,STD,MAX Cars %.4f %.4f %.4f %.4f" % (car_min,car_avg,car_std,car_max))

data_file = open('acwait.dat', 'a')
for i in range(1,21):
	#car_core = car_welford.r(i)
	ped_core = ped_welford.r(i)
	data_file.write(str(ped_core) + "\n")

data_file.close()

# vim: noexpandtab tabstop=4
